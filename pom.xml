<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <prerequisites>
    <maven>3.0</maven>
  </prerequisites>
  <groupId>org.mbari.m3.vars</groupId>
  <artifactId>vars-annotation</artifactId>
  <version>0.2.10</version>
  <packaging>jar</packaging>
  <name>VARS Annotation</name>
  <url>http://maven.apache.org</url>
  <!-- FXLauncher stuff https://github.com/edvin/fxldemo/blob/master/pom.xml -->
  <properties>
    <!-- Installer Filename without suffix -->
    <app.filename>VARS Annotation</app.filename>
    <!-- The JavaFX Application class name -->
    <app.mainClass>org.mbari.m3.vars.annotation.App</app.mainClass>
    <!-- Optional override to specify where the cached files are stored. Default is current working directory -->
    <!--<app.cacheDir>USERLIB/VarsAnnotation</app.cacheDir>-->
    <!-- Optional parameters to the application, will be embedded in the launcher and can be overriden on the command line -->
    <app.parameters>--myOption=myValue --myOtherOption=myOtherValue</app.parameters>
    <!-- The Application vendor used by javapackager -->
    <app.vendor>Monterey Bay Aquarium Research Institute</app.vendor>
    <!-- The Application version used by javapackager -->
    <app.version>${project.version}</app.version>
    <!-- Base URL where you will host the application artifacts -->
    <!--<app.url>http://dsg.mbari.org/m3/vars-annotation/</app.url>-->
    <app.url>http://m3.shore.mbari.org/apps/vars-annotation/</app.url>
    <!-- Optional scp target for application artifacts hosted at the above url -->
    <app.deploy.target>brian@m3.shore.mbari.org:/var/www/html/apps/vars-annotation</app.deploy.target>
    <!-- The app and launcher will be assembled in this folder -->
    <app.dir>${project.build.directory}/app</app.dir>
    <!-- Native installers will be built in this folder -->
    <app.installerdir>${project.build.directory}/installer</app.installerdir>
    <!-- Should the client downgrade if the server version is older than the local version? -->
    <app.acceptDowngrade>false</app.acceptDowngrade>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Dependency versions -->
    <auth0.version>3.8.1</auth0.version>
    <avfoundation.version>2.2.2</avfoundation.version>
    <blackmagic.version>0.0.2</blackmagic.version>
    <caffeine.version>2.7.0</caffeine.version>
    <config.version>1.3.3</config.version>
    <controlsfx.version>8.40.14</controlsfx.version>
    <fontawesomefx.version>8.15</fontawesomefx.version>
    <fxlauncher.version>1.0.21</fxlauncher.version>
    <gson.version>2.8.5</gson.version>
    <guava.version>27.1-jre</guava.version>
    <guice.version>4.2.2</guice.version>
    <javatime.version>1.1.1</javatime.version>
    <jersey.version>2.28</jersey.version>
    <jfoenix.version>8.0.8</jfoenix.version>
    <junit.version>4.12</junit.version>
    <logback.version>1.2.3</logback.version>
    <materialicons.version>2.2.0-5</materialicons.version>
    <mbarix4j.version>1.10.0</mbarix4j.version>
    <medusa.version>8.3</medusa.version>
    <nativelib.version>2.3.4</nativelib.version>
    <!-- version after 3.12.2 throw exceptions with retrofit version of okhttp3 -->
    <okhttp3log.version>3.12.2</okhttp3log.version>
    <retrofit.version>2.5.0</retrofit.version>
    <rxjava.version>2.2.8</rxjava.version>
    <rxjavafx.version>2.2.2</rxjavafx.version>
    <slf4j.version>1.7.26</slf4j.version>
    <vcr4j.version>4.0.2</vcr4j.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>de.jensd</groupId>
      <artifactId>fontawesomefx-commons</artifactId>
      <version>${fontawesomefx.version}</version>
    </dependency>
    <dependency>
      <groupId>de.jensd</groupId>
      <artifactId>fontawesomefx-materialicons</artifactId>
      <version>${materialicons.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.vcr4j</groupId>
      <artifactId>vcr4j-core</artifactId>
      <version>${vcr4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.vcr4j</groupId>
      <artifactId>vcr4j-sharktopoda</artifactId>
      <version>${vcr4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.vcr4j</groupId>
      <artifactId>vcr4j-jserialcomm</artifactId>
      <version>${vcr4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.vcr4j</groupId>
      <artifactId>vcr4j-rs422</artifactId>
      <version>${vcr4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.vcr4j</groupId>
      <artifactId>vcr4j-ui</artifactId>
      <version>${vcr4j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.squareup.retrofit2</groupId>
      <artifactId>retrofit</artifactId>
      <version>${retrofit.version}</version>
    </dependency>
    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>logging-interceptor</artifactId>
      <version>${okhttp3log.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>${gson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fatboyindustrial.gson-javatime-serialisers</groupId>
      <artifactId>gson-javatime-serialisers</artifactId>
      <version>${javatime.version}</version>
    </dependency>
    <dependency>
      <groupId>com.squareup.retrofit2</groupId>
      <artifactId>converter-gson</artifactId>
      <version>${retrofit.version}</version>
    </dependency>
    <dependency>
      <groupId>org.controlsfx</groupId>
      <artifactId>controlsfx</artifactId>
      <version>${controlsfx.version}</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/no.tornado/fxlauncher -->
    <dependency>
      <groupId>no.tornado</groupId>
      <artifactId>fxlauncher</artifactId>
      <version>${fxlauncher.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>${caffeine.version}</version>
    </dependency>
    <dependency>
      <groupId>io.reactivex.rxjava2</groupId>
      <artifactId>rxjava</artifactId>
      <version>${rxjava.version}</version>
    </dependency>
    <dependency>
      <groupId>io.reactivex.rxjava2</groupId>
      <artifactId>rxjavafx</artifactId>
      <version>${rxjavafx.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guice.version}</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe</groupId>
      <artifactId>config</artifactId>
      <version>${config.version}</version>
    </dependency>
    <!-- https://github.com/jfoenixadmin/JFoenix -->
    <dependency>
      <groupId>com.jfoenix</groupId>
      <artifactId>jfoenix</artifactId>
      <version>${jfoenix.version}</version>
    </dependency>
    <dependency>
      <groupId>com.auth0</groupId>
      <artifactId>java-jwt</artifactId>
      <version>${auth0.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari</groupId>
      <artifactId>mbarix4j</artifactId>
      <version>${mbarix4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>eu.hansolo</groupId>
      <artifactId>Medusa</artifactId>
      <version>${medusa.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.vars</groupId>
      <artifactId>vars-avfoundation</artifactId>
      <version>${avfoundation.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mbari.m3</groupId>
      <artifactId>vars-blackmagic</artifactId>
      <version>${blackmagic.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scijava</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>${nativelib.version}</version>
    </dependency>
  </dependencies>
  <!-- The build plugins below perform the following steps:
        1. Compile project jar to app.dir
        2. Copy dependencies to app.dir
        3. Generate app.xml manifest and embed it into fxlauncher.jar
        4. Create native installer
        5. Upload application artifacts
        Usage:
        Generate a working app into app.dir (target/app by default):
            mvn clean package
            (You can now launch the app with java -jar fxlauncher.jar from target/app)
        Deploy the application artifacts via scp
            mvn exec:exec@deploy-app
            (Auto update is now available. You can also run java -jar fxlauncher.jar)
        Build a native installer for the platform you are on (only needed once)
            mvn install
            (Look in target/installer/bundles for your native installer)
    -->
  <build>
    <plugins>
      <!-- Compile project jar to appdir -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <outputDirectory>${app.dir}</outputDirectory>
        </configuration>
      </plugin>
      <!-- package as uber jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>org.mbari.m3.vars.annotation.App</mainClass>
                </transformer>
              </transformers>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <finalName>${project.artifactId}-${project.version}-app</finalName>
        </configuration>
      </plugin>
      <!-- Copy dependencies to appdir -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <excludeScope>provided</excludeScope>
          <outputDirectory>${app.dir}</outputDirectory>
          <stripVersion>true</stripVersion>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <!-- Generate app.xml manifest -->
        <executions>
          <execution>
            <id>create-manifest</id>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>fxlauncher.CreateManifest</mainClass>
              <arguments>
                <argument>${app.url}</argument>
                <argument>${app.mainClass}</argument>
                <argument>${app.dir}</argument>
                <!--<argument>&#45;&#45;cache-dir=${app.cacheDir}</argument>-->
                <argument>--accept-downgrade=${app.acceptDowngrade}</argument>
                <argument>--include-extensions=jpg</argument>
                <argument>${app.parameters}</argument>
              </arguments>
            </configuration>
          </execution>
          <!-- Embed app.xml inside fxlauncher.xml so we don't need to reference app.xml to start the app -->
          <execution>
            <id>embed-manifest-in-launcher</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>jar</executable>
              <workingDirectory>${app.dir}</workingDirectory>
              <arguments>
                <argument>uf</argument>
                <argument>fxlauncher.jar</argument>
                <argument>app.xml</argument>
              </arguments>
            </configuration>
          </execution>
          <!-- Optional step to include custom UI, see https://github.com/edvin/fxlauncher-custom-ui -->
          <!--<execution>-->
          <!--<id>embed-custom-ui-in-launcher</id>-->
          <!--<phase>package</phase>-->
          <!--<goals>-->
          <!--<goal>exec</goal>-->
          <!--</goals>-->
          <!--<configuration>-->
          <!--<executable>jar</executable>-->
          <!--<workingDirectory>${app.dir}</workingDirectory>-->
          <!--<arguments>-->
          <!--<argument>uf</argument>-->
          <!--<argument>fxlauncher.jar</argument>-->
          <!--<argument>-C</argument>-->
          <!--<argument>${project.basedir}/../fxlauncher-custom-ui/target/classes</argument>-->
          <!--<argument>.</argument>-->
          <!--</arguments>-->
          <!--</configuration>-->
          <!--</execution>-->
          <!-- Create native installer. Feel free to add more arguments as needed.
           https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html
           -->
          <!--<execution>-->
          <!--<id>installer</id>-->
          <!--<phase>install</phase>-->
          <!--<goals>-->
          <!--<goal>exec</goal>-->
          <!--</goals>-->
          <!--<configuration>-->
          <!--<executable>javapackager</executable>-->
          <!--<arguments>-->
          <!--<argument>-deploy</argument>-->
          <!--<argument>-native</argument>-->
          <!--<argument>-outdir</argument>-->
          <!--<argument>${app.installerdir}</argument>-->
          <!--<argument>-outfile</argument>-->
          <!--<argument>${app.filename}</argument>-->
          <!--<argument>-srcdir</argument>-->
          <!--<argument>${app.dir}</argument>-->
          <!--<argument>-srcfiles</argument>-->
          <!--<argument>fxlauncher.jar</argument>-->
          <!--<argument>-appclass</argument>-->
          <!--<argument>fxlauncher.Launcher</argument>-->
          <!--<argument>-name</argument>-->
          <!--<argument>${project.name}</argument>-->
          <!--<argument>-title</argument>-->
          <!--<argument>${project.name}</argument>-->
          <!--<argument>-vendor</argument>-->
          <!--<argument>${app.vendor}</argument>-->
          <!--<argument>-BappVersion=${app.version}</argument>-->
          <!--<argument>-Bidentifier=${project.groupId}.${project.artifactId}</argument>-->
          <!--</arguments>-->
          <!--</configuration>-->
          <!--</execution>-->
          <!-- Copy application artifacts to remote site using scp (optional) -->
          <execution>
            <id>deploy-app</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>scp</executable>
              <arguments>
                <argument>-r</argument>
                <argument>${app.dir}/.</argument>
                <argument>${app.deploy.target}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <compilerArgs>
            <arg>-Xlint:all,-options,-path</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.zenjava</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>8.6.0</version>
        <configuration>
          <mainClass>${app.mainClass}</mainClass>
          <verbose>true</verbose>
          <identifier>VARSAnnotation</identifier>
          <vendor>Monterey Bay Aquarium Research Institute</vendor>
          <appName>${project.name}</appName>
          <bundleArguments>
            <!-- to include "dtjava.js" and other related files, set this to TRUE -->
            <jnlp.includeDT>true</jnlp.includeDT>
            <jnlp.outfile>${project.name}</jnlp.outfile>
          </bundleArguments>
        </configuration>
        <executions>
          <execution>
            <!-- required before build-native -->
            <id>create-jfxjar</id>
            <phase>package</phase>
            <goals>
              <goal>build-jar</goal>
            </goals>
          </execution>
          <execution>
            <id>create-native</id>
            <phase>package</phase>
            <goals>
              <goal>build-native</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Generate an assembly -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/pack.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>attached</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <repositories>
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>bintray-jerady-maven</id>
      <name>bintray</name>
      <url>http://dl.bintray.com/jerady/maven</url>
    </repository>
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>bintray-hohonuuli-maven</id>
      <name>bintray</name>
      <url>http://dl.bintray.com/hohonuuli/maven</url>
    </repository>
  </repositories>
</project>